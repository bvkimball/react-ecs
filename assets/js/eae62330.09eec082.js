(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{135:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),s=(n(0),n(155)),i=n(193),c={title:"Systems and Queries",sidebar_label:"Systems and Queries",sidebar_position:3},o={unversionedId:"core/systems_and_queries",id:"core/systems_and_queries",isDocsHomePage:!1,title:"Systems and Queries",description:"Systems",source:"@site/docs/core/systems_and_queries.md",sourceDirName:"core",slug:"/core/systems_and_queries",permalink:"/docs/core/systems_and_queries",editUrl:"https://github.com/dustinlacewell/react-ecs/edit/master/apps/docs/docs/core/systems_and_queries.md",version:"current",sidebar_label:"Systems and Queries",sidebarPosition:3,frontMatter:{title:"Systems and Queries",sidebar_label:"Systems and Queries",sidebar_position:3},sidebar:"mySidebar",previous:{title:"Declaring Entities",permalink:"/docs/core/declaring_entities"},next:{title:"Entity Views",permalink:"/docs/core/entity_views"}},l=[{value:"Systems",id:"systems",children:[{value:"Defining Systems",id:"defining-systems",children:[]},{value:"Using Systems",id:"using-systems",children:[]},{value:"Processing Entities",id:"processing-entities",children:[]}]},{value:"Queries",id:"queries",children:[{value:"Creating Queries",id:"creating-queries",children:[]},{value:"Query Entities",id:"query-entities",children:[]},{value:"Query Events",id:"query-events",children:[]}]}],p={toc:l};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"systems"},"Systems"),Object(s.b)("p",null,Object(s.b)("a",{parentName:"p",href:"/api/core/classes/entity"},"Entities")," are just collections of ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/facet"},"Facets")," which only contain data."),Object(s.b)("p",null,Object(s.b)("a",{parentName:"p",href:"/api/core/types/system"},"Systems")," provide all the behavior of your ECS."),Object(s.b)("h3",{id:"defining-systems"},"Defining Systems"),Object(s.b)("p",null,"Use the ",Object(s.b)("a",{parentName:"p",href:"/api/core/functions/usesystem"},"useSystem")," hook to define a new system. It takes a callback that is called every time ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/ecs#update"},"ECS.update")," is called."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"const PrintFrameTimeSystem = () => {\n    return useSystem((dt) => {\n        console.log(`Last frame took ${dt} seconds.`);\n    });\n};\n")),Object(s.b)(i.a,{label:"Tip",mdxType:"Warning"},Object(s.b)("p",null,Object(s.b)("a",{parentName:"p",href:"/api/core/functions/usesystem"},"useSystem")," returns ",Object(s.b)("inlineCode",{parentName:"p"},"null")," so you can return ",Object(s.b)("em",{parentName:"p"},"it"),", to keep your system components tidy.")),Object(s.b)("h4",{id:"system-priorities"},"System Priorities"),Object(s.b)("p",null,"By default, all systems have a priority of ",Object(s.b)("inlineCode",{parentName:"p"},"0")," and are called in the order of your ",Object(s.b)("a",{parentName:"p",href:"/api/core/functions/usesystem"},"useSystem")," calls."),Object(s.b)("p",null,"Pass a priority as the second parameter (lower is first) to override this behavior:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},'useSystem((dt) => console.log("I\'m called second."), 1);\nuseSystem((dt) => console.log("I\'m called first."), 0);\n')),Object(s.b)("h3",{id:"using-systems"},"Using Systems"),Object(s.b)("p",null,"To use a system just include it anywhere within the context of an ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/ecs#provider"},"ECS.Provider"),":"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"<ECS.Provider>\n    <PrintFrameTimeSystem />\n    <GravitySystem vector={[0, -9.8, 0]}>\n    {/* ... */}\n</ECS.Provider>\n")),Object(s.b)(i.a,{label:"Tip",mdxType:"Warning"},Object(s.b)("p",null,"Systems don't need to appear as direct children of ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/ecs#provider"},"ECS.Provider"),". Organize things however you'd like.")),Object(s.b)("h3",{id:"processing-entities"},"Processing Entities"),Object(s.b)("p",null,"The ",Object(s.b)("a",{parentName:"p",href:"/api/core/functions/useEngine"},"useEngine")," hook can be used to access all ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/entity"},"Entities")," with your ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/ecs"},"ECS"),":"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"const CoolSim = () => {\n    const engine = useEngine();\n    return useSystem((dt) => {\n        for (const entity of engine.entities) {\n            // ...\n        }\n    });\n};\n")),Object(s.b)(i.a,{mdxType:"Warning"},Object(s.b)("p",null,"Like with most things, The ",Object(s.b)("a",{parentName:"p",href:"/api/core/functions/useengine"},"useEngine")," hook must be used within the context of an ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/ecs#provider"},"ECS.Provider"),".")),Object(s.b)("h2",{id:"queries"},"Queries"),Object(s.b)("p",null,Object(s.b)("a",{parentName:"p",href:"/api/core/classes/query"},"Queries")," keep track of which ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/entity"},"Entities")," which have a specific set of ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/facet"},"Facets"),"."),Object(s.b)("h3",{id:"creating-queries"},"Creating Queries"),Object(s.b)("p",null,"Use the ",Object(s.b)("a",{parentName:"p",href:"/api/core/functions/usequery"},"useQuery")," hook:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"const PoisonSystem = () => {\n    const query = useQuery((e) => e.hasAll(Health, PoisonStatus));\n    return useSystem((dt) => {\n        for (const entity of query.entities) {\n            // ...\n        }\n    });\n};\n")),Object(s.b)("p",null,"It takes a predicate function that should return ",Object(s.b)("inlineCode",{parentName:"p"},"true")," if the passed ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/entity"},"Entity")," has the desired ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/facet"},"Facets"),"."),Object(s.b)(i.a,{label:"Tip",mdxType:"Warning"},Object(s.b)("p",null,"Anytime an ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/entity"},"Entity")," is added or removed from the query, it will re-render the component.")),Object(s.b)("h3",{id:"query-entities"},"Query Entities"),Object(s.b)("p",null,"Every ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/query"},"Query")," has a ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/query#entities"},".entities")," property that contains all the entities matched by the query."),Object(s.b)("p",null,"However, there is also the ",Object(s.b)("a",{parentName:"p",href:"/api/core/classes/query#loop"},"Query.loop")," method:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"const PoisonSystem = () => {\n    const query useQuery((e) => e.hasAll(IsEnemy, Health, PoisonStatus));\n    return useSystem((dt) => {\n        query.loop([Health, PoisonStatus], (e, [health, poison]) => {\n            health.current -= poison.amount;\n        })\n    })\n}\n")),Object(s.b)("p",null,Object(s.b)("a",{parentName:"p",href:"/api/core/classes/query#loop"},"Query.loop")," takes two arguments:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"a ",Object(s.b)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-3.html#tuple-types"},"tuple")," of ",Object(s.b)("a",{parentName:"li",href:"/api/core/classes/facet"},"Facets")," types you're interested in."),Object(s.b)("li",{parentName:"ul"},"a function called for every entity matched by the query.")),Object(s.b)("p",null,"The callback receives two arguments:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"an entity"),Object(s.b)("li",{parentName:"ul"},"the facet instances of that entity, that you requested with the tuple of types")),Object(s.b)("p",null,"In the example above, the query matches all entities with the ",Object(s.b)("inlineCode",{parentName:"p"},"IsEnemy"),", ",Object(s.b)("inlineCode",{parentName:"p"},"Health")," and ",Object(s.b)("inlineCode",{parentName:"p"},"PoisonStatus"),". But the loop call only requests the ",Object(s.b)("inlineCode",{parentName:"p"},"Health")," and ",Object(s.b)("inlineCode",{parentName:"p"},"PoisonStatus")," effects, which it receives as ",Object(s.b)("inlineCode",{parentName:"p"},"health")," and ",Object(s.b)("inlineCode",{parentName:"p"},"poison"),"."),Object(s.b)("p",null,"The facet instances passed to your callbacks are ",Object(s.b)("strong",{parentName:"p"},"type-safe")," and appear in the order in which you requested them:"),Object(s.b)("p",null,"A tuple of ",Object(s.b)("inlineCode",{parentName:"p"},"[Health, PoisonStatus]")," results in a tuple ",Object(s.b)("inlineCode",{parentName:"p"},"[health, poison]")," where ",Object(s.b)("inlineCode",{parentName:"p"},"health")," is statically-typed as ",Object(s.b)("inlineCode",{parentName:"p"},"Health")," and ",Object(s.b)("inlineCode",{parentName:"p"},"poison")," is statically-typed as ",Object(s.b)("inlineCode",{parentName:"p"},"PoisonStatus"),". (Pretty cool right?)"),Object(s.b)(i.a,{mdxType:"Warning"},Object(s.b)("p",null,"The tuple of types you request doesn't have to be the same facets used in the query's predicate. However, it is a good idea to keep it to a ",Object(s.b)("em",{parentName:"p"},"subset")," of the facets used in the query's predicate, to ensure the entities you loop over actually have the facets you request.")),Object(s.b)("h3",{id:"query-events"},"Query Events"),Object(s.b)("p",null,"The ",Object(s.b)("a",{parentName:"p",href:"/api/core/functions/usequery"},"useQuery")," hook has a second argument where you can supply event callbacks:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"const query = useQuery(e => e.has(Invisible), {\n    added: e => ... , // this entity just started matching the query\n    removed: e => ... , // this entity no longer matches the query\n})\n")))}u.isMDXComponent=!0},155:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,m=u["".concat(i,".").concat(d)]||u[d]||b[d]||s;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<s;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},193:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(0),r=n.n(a),s=n(194),i=n.n(s),c=function(e){return r.a.createElement("div",{className:i.a.warning},r.a.createElement("span",null,e.label||"Warning:"),e.children)}},194:function(e,t,n){e.exports={warning:"warning_3qBW"}}}]);